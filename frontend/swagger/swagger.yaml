swagger: '2.0'
info:
  description: Node.js Server for a simple example project
  version: 0.0.1
  title: Cornflake List
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: Timon Mi
    email: timon.mi@test.de
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: /
schemes:
- http
- https
paths:
  /api/user:
    get:
      tags:
      - User
      summary: Get One User
      description: ''
      operationId: getUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: email
        in: query
        description: Identification of the User
        required: true
        type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Bad Request
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  /api/user/add:
    post:
      tags:
      - User
      summary: Create one User
      description: ''
      operationId: addUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: User
        schema:
          $ref: '#/definitions/User'
        required: true
        description: Given user to persist.
      responses:
        '201':
          description: Created, User is created
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Bad Request
  /api/user/delete:
    delete:
      tags:
      - User
      summary: Delete User
      description: ''
      operationId: deleteUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: authorization
        in: header
        description: Authentication token of User
        required: true
        type: "string"
      - name: email
        in: query
        description: Identification of the User
        required: true
        type: string
      responses:
        '200':
          description: Ok User is deleted
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized to delete
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  /api/user/update:
    put:
      tags:
      - User
      summary: Update User
      description: You can only update phoneNumber email and displayName
      operationId: updateUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: authorization
        in: header
        description: Authentication token of User
        required: true
        type: "string"
      - in: body
        name: User
        schema:
          $ref: '#/definitions/User'
        required: true
        description: Given user to update.
      responses:
        '200':
          description: Ok, User is updated
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized to update
  /api/cornflake:
    get:
      tags:
      - Cornflake
      summary: Get One Cornflake
      description: ''
      operationId: getCornflake
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: authorization
        in: header
        description: Authentication token of User
        required: true
        type: "string"
      - name: id
        in: query
        description: Identification of the Cornflake
        required: true
        type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Cornflake'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Cornflake not found
  /api/cornflake/all:
    get:
      tags:
      - Cornflake
      summary: Get All Cornflake of one User
      description: ''
      operationId: getAllCornflake
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: authorization
        in: header
        description: Authentication token of User
        required: true
        type: "string"
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Cornflake'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Cornflake not found
  /api/cornflake/add:
    post:
      tags:
      - Cornflake
      summary: Create one Cornflake
      description: ''
      operationId: addCornflake
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: authorization
        in: header
        description: Authentication token of User
        required: true
        type: "string"
      - in: body
        name: User
        schema:
          $ref: '#/definitions/Cornflake'
        required: true
        description: Given cornflake to persist.
      responses:
        '201':
          description: Created, Cornflake is created
          schema:
            $ref: '#/definitions/Cornflake'
        '400':
          description: Bad Request
  /api/cornflake/delete:
    delete:
      tags:
      - Cornflake
      summary: Delete Cornflake
      description: ''
      operationId: deleteCornflake
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: authorization
        in: header
        description: Authentication token of User
        required: true
        type: "string"
      - name: id
        in: query
        description: Identification of the Cornflake
        required: true
        type: string
      responses:
        '200':
          description: Ok User is deleted
          schema:
            $ref: '#/definitions/Cornflake'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized to delete
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  /api/cornflake/update:
    put:
      tags:
      - Cornflake
      summary: Update Cornflake
      description: ''
      operationId: updateCornflake
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: authorization
        in: header
        description: Authentication token of User
        required: true
        type: "string"
      - in: body
        name: Cornflake
        schema:
          $ref: '#/definitions/Cornflake'
        required: true
        description: Given cornflake to update.
      responses:
        '200':
          description: Ok, Cornflake is updated
          schema:
            $ref: '#/definitions/Cornflake'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized to update
definitions:
  User:
    type: object
    properties:
      uid:
        type: string
        format: string
        example: ""
      displayName:
        type: string
        format: string
        pattern: '[A-Z][a-zA-Z]*'
        example: Angela Merkel
      email:
        type: string
        format: string
        pattern: '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'
        example: m.mustermann@gmx.de
      emailVerified:
        type: boolean
        example: false
      phoneNumber:
        type: string
        format: string
        pattern: '^\+[1-9]\d{1,14}$'
        example: ""
      password:
        type: string
        format: string
        pattern: '.{6,100}'
        example: password
      photoURL:
        type: string
        format: string
        example: ''
      disabled:
        type: boolean
        example: false
  Cornflake:
    type: object
    properties:
      id:
        type: integer
        format: int32
        example: 1
      name:
        type: string
        format: string
        pattern: '[A-Z][a-zA-Z]*'
        example: Crispy Flakes
      producer:
        type: string
        format: string
        pattern: '[A-Z][a-zA-Z]*'
        example: Crspy GmbH
      age_group:
        type: integer
        format: int32
        minimum: 0
        maximum: 2
        example: 0
      type:
        type: integer
        format: int32
        minimum: 0
        maximum: 3
        example: 0
      about:
        type: string
        format: string
        example: Information about Crispy Flakes
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'